{"ts":1354867623942,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1354867663877,"patch":[[{"diffs":[[1,"package main\n\nimport (\n    \"bytes\"\n\t\"encoding/json\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nconst apiurl = \"https://www.googleapis.com/urlshortener/v1/url\"\n\nvar (\n\tdomain_file = flag.String(\"domain_file\", \"domains.txt\", \"file containing all the domains\")\n)\n\ntype UrlMap struct {\n\tUrl          string\n\tShortenedUrl string\n}\n\ntype ShortenedUrl struct {\n\tKind    string\n\tId      string\n\tLongurl string\n}\n\nfunc retrieveUrls() []string {\n\tdomain_file, err := ioutil.ReadFile(*domain_file)\n\tif err != nil {\n\t\tlog.Fatal(\" error \", err)\n\t}\n\treturn strings.Split(string(domain_file), \"\\n\")\n}\n\nfunc shorten(url string) (id string, err error) {\n\tbuf := bytes.NewBuffer(nil)\n\tbuf.WriteString(fmt.Sprintf(`{\"longUrl\": \"%s\"}`, url))\n\tres, err := http.Post(apiurl, \"application/json\", buf)\n\tif err != nil {\n\t\tlog.Fatal(\"error\", err)\n\t\treturn \"\", err\n\t}\n\tbody, _ := ioutil.ReadAll(res.Body)\n\tvar shortened ShortenedUrl\n\tjson.Unmarshal(body, &shortened)\n\treturn shortened.Id, nil\n}\n\nfunc shortenUrl(returnChannel chan string, url string) (shortenedUrls []string, err error) {\n\tbuf := bytes.NewBuffer(nil)\n\tbuf.WriteString(fmt.Sprintf(`{\"longUrl\": \"%s\"}`, url))\n\tres, err := http.Post(apiurl, \"application/json\", buf)\n\tif err != nil {\n\t\tlog.Fatal(\"error\", err)\n\t\treturn nil, err\n\t}\n\tbody, _ := ioutil.ReadAll(res.Body)\n\tvar shortened ShortenedUrl\n\tjson.Unmarshal(body, &shortened)\n\tshortenedUrls = append(shortenedUrls, shortened.Id)\n\treturnChannel <- shortened.Id\n\treturn shortenedUrls, nil\n}\n\nfunc waitForDomains(responseChannel chan string, numberOfDomains int) (domainMapping []string) {\n\treturnedCount := 0\n\tfor {\n\t\tdomainMapping = append(domainMapping, <-responseChannel)\n\t\treturnedCount++\n\n\t\tif returnedCount >= numberOfDomains {\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn\n}\n\nfunc main() {\n\tstart := time.Now()\n\tflag.Parse()\n\t//create a channel where the shortened url will be sent to\n\tresponseChannel := make(chan string)\n\tif len(*domain_file) == 0 {\n\t\tlog.Fatal(\"Please specify the path to the domain file\")\n\t}\n\n\tlongurls := retrieveUrls()\n\tfor _, url := range longurls {\n\t\tgo shortenUrl(responseChannel, url)\n\t}\n\n\tdomainMapping := waitForDomains(responseChannel, len(longurls))\n\n\tfmt.Println(domainMapping)\n\telapsed := time.Since(start)\n\tfmt.Println(elapsed)\n\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2265}]],"length":2265,"saved":false}
